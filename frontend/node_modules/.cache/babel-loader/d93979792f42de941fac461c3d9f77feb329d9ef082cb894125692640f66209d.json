{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/initiativer';\n\n/**\n * Henter alle initiativer\n * @returns {Promise<Array>} Array med initiativer\n */\nexport const hentAlleInitiativer = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data.data;\n  } catch (error) {\n    console.error('Feil ved henting av initiativer:', error);\n    throw error;\n  }\n};\n\n/**\n * Henter et spesifikt initiativ basert på ID\n * @param {string} id - Initiativ-ID\n * @returns {Promise<Object>} Initiativ-objekt\n */\nexport const hentInitiativById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved henting av initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Oppretter et nytt initiativ\n * @param {Object} initiativData - Data for det nye initiativet\n * @returns {Promise<Object>} Det opprettede initiativet\n */\nexport const opprettInitiativ = async initiativData => {\n  try {\n    const response = await axios.post(API_URL, initiativData);\n    return response.data.data;\n  } catch (error) {\n    console.error('Feil ved oppretting av initiativ:', error);\n    throw error;\n  }\n};\n\n/**\n * Oppretter et initiativ basert på dialog\n * @param {string} message - Brukerens melding\n * @returns {Promise<Object>} Respons med initiativdata eller AI-respons\n */\nexport const opprettInitiativFraDialog = async message => {\n  try {\n    const response = await axios.post(`${API_URL}/dialog`, {\n      message\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Feil ved oppretting av initiativ fra dialog:', error);\n    throw error;\n  }\n};\n\n/**\n * Oppdaterer et initiativ\n * @param {string} id - Initiativ-ID\n * @param {Object} initiativData - Oppdatert initiativdata\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const oppdaterInitiativ = async (id, initiativData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, initiativData);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved oppdatering av initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Oppdaterer status for et initiativ\n * @param {string} id - Initiativ-ID\n * @param {string} status - Ny status\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const oppdaterInitiativStatus = async (id, status) => {\n  try {\n    const response = await axios.patch(`${API_URL}/${id}/status`, {\n      status\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved oppdatering av status for initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Legger til en handling/oppfølgingspunkt for et initiativ\n * @param {string} id - Initiativ-ID\n * @param {Object} handlingData - Data for handlingen\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const leggTilHandling = async (id, handlingData) => {\n  try {\n    const response = await axios.post(`${API_URL}/${id}/handlinger`, handlingData);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved tillegging av handling for initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Oppdaterer en handling/oppfølgingspunkt for et initiativ\n * @param {string} id - Initiativ-ID\n * @param {string} handlingId - Handling-ID\n * @param {Object} handlingData - Oppdatert handlingsdata\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const oppdaterHandling = async (id, handlingId, handlingData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}/handlinger/${handlingId}`, handlingData);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved oppdatering av handling med ID ${handlingId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Legger til et vedlegg/lenke for et initiativ\n * @param {string} id - Initiativ-ID\n * @param {Object} vedleggData - Data for vedlegget\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const leggTilVedlegg = async (id, vedleggData) => {\n  try {\n    const response = await axios.post(`${API_URL}/${id}/vedlegg`, vedleggData);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved tillegging av vedlegg for initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Sletter et initiativ\n * @param {string} id - Initiativ-ID\n * @returns {Promise<Object>} Respons fra API\n */\nexport const slettInitiativ = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Feil ved sletting av initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Importerer initiativer fra en Excel-fil\n * @param {File} file - Excel-filen som skal importeres\n * @returns {Promise<Object>} Resultatet av importen\n */\nexport const importInitiativerFromExcel = async file => {\n  try {\n    const formData = new FormData();\n    formData.append('excelFile', file);\n    const response = await axios.post(`${API_URL}/import-excel`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Feil ved import av Excel-fil:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","hentAlleInitiativer","response","get","data","error","console","hentInitiativById","id","opprettInitiativ","initiativData","post","opprettInitiativFraDialog","message","oppdaterInitiativ","put","oppdaterInitiativStatus","status","patch","leggTilHandling","handlingData","oppdaterHandling","handlingId","leggTilVedlegg","vedleggData","slettInitiativ","delete","importInitiativerFromExcel","file","formData","FormData","append","headers"],"sources":["/Users/trygverefvem/kioversikt/frontend/src/services/initiativService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api/initiativer';\n\n/**\n * Henter alle initiativer\n * @returns {Promise<Array>} Array med initiativer\n */\nexport const hentAlleInitiativer = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data.data;\n  } catch (error) {\n    console.error('Feil ved henting av initiativer:', error);\n    throw error;\n  }\n};\n\n/**\n * Henter et spesifikt initiativ basert på ID\n * @param {string} id - Initiativ-ID\n * @returns {Promise<Object>} Initiativ-objekt\n */\nexport const hentInitiativById = async (id: string) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved henting av initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Oppretter et nytt initiativ\n * @param {Object} initiativData - Data for det nye initiativet\n * @returns {Promise<Object>} Det opprettede initiativet\n */\nexport const opprettInitiativ = async (initiativData: any) => {\n  try {\n    const response = await axios.post(API_URL, initiativData);\n    return response.data.data;\n  } catch (error) {\n    console.error('Feil ved oppretting av initiativ:', error);\n    throw error;\n  }\n};\n\n/**\n * Oppretter et initiativ basert på dialog\n * @param {string} message - Brukerens melding\n * @returns {Promise<Object>} Respons med initiativdata eller AI-respons\n */\nexport const opprettInitiativFraDialog = async (message: string) => {\n  try {\n    const response = await axios.post(`${API_URL}/dialog`, { message });\n    return response.data;\n  } catch (error) {\n    console.error('Feil ved oppretting av initiativ fra dialog:', error);\n    throw error;\n  }\n};\n\n/**\n * Oppdaterer et initiativ\n * @param {string} id - Initiativ-ID\n * @param {Object} initiativData - Oppdatert initiativdata\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const oppdaterInitiativ = async (id: string, initiativData: any) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, initiativData);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved oppdatering av initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Oppdaterer status for et initiativ\n * @param {string} id - Initiativ-ID\n * @param {string} status - Ny status\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const oppdaterInitiativStatus = async (id: string, status: string) => {\n  try {\n    const response = await axios.patch(`${API_URL}/${id}/status`, { status });\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved oppdatering av status for initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Legger til en handling/oppfølgingspunkt for et initiativ\n * @param {string} id - Initiativ-ID\n * @param {Object} handlingData - Data for handlingen\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const leggTilHandling = async (id: string, handlingData: any) => {\n  try {\n    const response = await axios.post(`${API_URL}/${id}/handlinger`, handlingData);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved tillegging av handling for initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Oppdaterer en handling/oppfølgingspunkt for et initiativ\n * @param {string} id - Initiativ-ID\n * @param {string} handlingId - Handling-ID\n * @param {Object} handlingData - Oppdatert handlingsdata\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const oppdaterHandling = async (id: string, handlingId: string, handlingData: any) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}/handlinger/${handlingId}`, handlingData);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved oppdatering av handling med ID ${handlingId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Legger til et vedlegg/lenke for et initiativ\n * @param {string} id - Initiativ-ID\n * @param {Object} vedleggData - Data for vedlegget\n * @returns {Promise<Object>} Det oppdaterte initiativet\n */\nexport const leggTilVedlegg = async (id: string, vedleggData: any) => {\n  try {\n    const response = await axios.post(`${API_URL}/${id}/vedlegg`, vedleggData);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Feil ved tillegging av vedlegg for initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Sletter et initiativ\n * @param {string} id - Initiativ-ID\n * @returns {Promise<Object>} Respons fra API\n */\nexport const slettInitiativ = async (id: string) => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Feil ved sletting av initiativ med ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Importerer initiativer fra en Excel-fil\n * @param {File} file - Excel-filen som skal importeres\n * @returns {Promise<Object>} Resultatet av importen\n */\nexport const importInitiativerFromExcel = async (file: File) => {\n  try {\n    const formData = new FormData();\n    formData.append('excelFile', file);\n    \n    const response = await axios.post(`${API_URL}/import-excel`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    \n    return response.data.data;\n  } catch (error) {\n    console.error('Feil ved import av Excel-fil:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}